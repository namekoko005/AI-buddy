// Data stored in memory
let tasks = [];
let courses = [];
let chatHistory = [];
let summaryLibrary = [];
let notificationHistory = [];
let lineConnected = false;
let autoSyncInterval = null;

// OpenAI API Configuration
let OPENAI_API_KEY = '';

// Check and set API Key
function initializeAPI() {
    const savedKey = localStorage.getItem('openai_api_key');
    if (savedKey) {
        OPENAI_API_KEY = savedKey;
    } else {
        promptForAPIKey();
    }
}

function promptForAPIKey() {
    const key = prompt(`üîë ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà OpenAI API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
        
üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ API Key:
1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://platform.openai.com/api-keys
2. ‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡πÉ‡∏´‡∏°‡πà
3. Copy ‡∏°‡∏≤‡πÉ‡∏™‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
        
‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: 
- API Key ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ API Key ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Mock ‡πÑ‡∏î‡πâ
- ‡∏Å‡∏î Cancel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö Mock`);
        
    if (key && key.trim()) {
        OPENAI_API_KEY = key.trim();
        localStorage.setItem('openai_api_key', OPENAI_API_KEY);
        alert('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\n\nüß™ ‡∏•‡∏≠‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏≤‡∏° AI ‡∏ï‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö');
        return true;
    } else {
        alert('‚ÑπÔ∏è ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Mock (‡∏à‡∏≥‡∏•‡∏≠‡∏á) ‡πÅ‡∏ó‡∏ô\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° API Key ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏° "‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key"');
        return false;
    }
}

async function callOpenAI(messages, maxTokens = 500) {
    if (!OPENAI_API_KEY) {
        promptForAPIKey();
        if (!OPENAI_API_KEY) return null;
    }
    
    // Try multiple proxies
    const proxyUrls = [
        'https://api.openai.com/v1/chat/completions', // Direct (may fail due to CORS)
        'https://cors-anywhere.herokuapp.com/https://api.openai.com/v1/chat/completions', // CORS Proxy
        `https://api.allorigins.win/raw?url=${encodeURIComponent('https://api.openai.com/v1/chat/completions')}` // Alternative Proxy
    ];
    
    const requestBody = {
        model: 'gpt-3.5-turbo',
        messages: messages,
        max_tokens: maxTokens,
        temperature: 0.7
    };
    
    for (let i = 0; i < proxyUrls.length; i++) {
        try {
            console.log(`‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô method ${i + 1}...`);
            
            let requestOptions = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            };
            
            if (i < 2) {
                requestOptions.headers['Authorization'] = `Bearer ${OPENAI_API_KEY}`;
            }
            
            if (i === 2) {
                requestOptions = {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        url: 'https://api.openai.com/v1/chat/completions',
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${OPENAI_API_KEY}`,
                            'Content-Type': 'application/json'
                        },
                        data: requestBody
                    })
                };
            }
            
            const response = await fetch(proxyUrls[i], requestOptions);
            
            if (!response.ok) {
                if (response.status === 401) {
                    alert('‚ùå API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
                    localStorage.removeItem('openai_api_key');
                    OPENAI_API_KEY = '';
                    return null;
                }
                if (response.status === 429) {
                    alert('‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
                    return null;
                }
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log(`‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ú‡πà‡∏≤‡∏ô method ${i + 1}`);
            return data.choices[0].message.content;
            
        } catch (error) {
            console.log(`‚ùå Method ${i + 1} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, error.message);
            if (i === proxyUrls.length - 1) {
                console.error('All methods failed:', error);
                showConnectionError();
                return null;
            }
        }
    }
}

function showConnectionError() {
    const errorMsg = `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ OpenAI API ‡πÑ‡∏î‡πâ
    
üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï
3. ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
4. ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Mock ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
    
üí° ‡πÅ‡∏≠‡∏õ‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô`;
    
    alert(errorMsg);
}

function showTab(tabName, element) {
    const tabs = document.querySelectorAll('.tab-content');
    tabs.forEach(tab => tab.classList.remove('active'));
    
    const buttons = document.querySelectorAll('.tab-btn');
    buttons.forEach(btn => btn.classList.remove('active'));
    
    document.getElementById(tabName).classList.add('active');
    element.classList.add('active');
}
function handleImageUpload(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function(e) {
        const previewImg = document.getElementById('preview-img');
        previewImg.src = e.target.result;
        document.getElementById('image-preview').style.display = 'block';
        document.getElementById('image-content').style.display = 'none';
        document.getElementById('lesson-text').value = ''; 
    };
    reader.readAsDataURL(file);
}
async function extractTextFromImage() {
    const previewImg = document.getElementById('preview-img');
    const imageTextDiv = document.getElementById('image-text');
    const lessonTextarea = document.getElementById('lesson-text');

    if (!previewImg.src) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô');
        return;
    }

    imageTextDiv.innerHTML = 'ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...';
    document.getElementById('image-content').style.display = 'block';

    try {
        const { data: { text } } = await Tesseract.recognize(
            previewImg.src,
            'tha+eng', 
            { logger: m => console.log(m) }
        );

        imageTextDiv.innerHTML = text.replace(/\n/g, '<br>');
        lessonTextarea.value = text;
        alert('‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î "‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥" ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢');

    } catch (error) {
        console.error('OCR Error:', error);
        imageTextDiv.innerHTML = '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
        alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ');
    }
}

async function summarizeLesson() {
    const text = document.getElementById('lesson-text').value;
    if (!text.trim()) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ');
        return;
    }

    document.getElementById('summary-result').style.display = 'block';
    document.getElementById('summary-content').innerHTML = 'ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤...';

    const messages = [
        {
            role: 'system',
            content: `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå 
            
‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:
**üìù ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:**
[‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2-3 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ]
    
**üí° ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:**
‚Ä¢ [‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà 1]
‚Ä¢ [‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà 2] 
‚Ä¢ [‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà 3]
    
**üéØ ‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏≠‡∏≠‡∏Å:**
‚Ä¢ [‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö]`
        },
        {
            role: 'user',
            content: `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ô‡∏µ‡πâ: ${text}`
        }
    ];

    const summary = await callOpenAI(messages, 800);
    
    if (summary) {
        document.getElementById('summary-content').innerHTML = summary.replace(/\n/g, '<br>');
        summaryLibrary.push({
            id: Date.now(),
            title: text.substring(0, 50) + '...',
            content: summary,
            style: 'simple',
            date: new Date().toLocaleDateString('th-TH')
        });
        showSummaryActions();
    } else {
        document.getElementById('summary-content').innerHTML = generateMockSummary(text);
    }
}

function showSummaryActions() {}

function saveSummary() {
    const content = document.getElementById('summary-content').innerHTML;
    const blob = new Blob([content], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô_${new Date().toLocaleDateString('th-TH')}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    alert('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!');
}

function shareSummary() {
    const content = document.getElementById('summary-content').innerText;
    if (navigator.share) {
        navigator.share({
            title: '‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô - AI Buddy',
            text: content
        });
    } else {
        navigator.clipboard.writeText(content).then(() => {
            alert('üì§ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏•‡πâ‡∏ß!');
        });
    }
}

async function generateQuiz() {
    const summaryContent = document.getElementById('summary-content').innerText;
    
    const messages = [
        {
            role: 'system',
            content: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö 5 ‡∏Ç‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤ ‡πÅ‡∏ö‡∏ö:
            
**üß† ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à**
            
**‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà 1:** [‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°]
a) [‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å A]
b) [‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å B] 
c) [‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å C]
d) [‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å D]
            
*‡πÄ‡∏â‡∏•‡∏¢: [‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å] - [‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢]*`
        },
        {
            role: 'user',
            content: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ô‡∏µ‡πâ: ${summaryContent}`
        }
    ];

    const quiz = await callOpenAI(messages, 800);
    if (quiz) {
        document.getElementById('summary-content').innerHTML += '<hr>' + quiz.replace(/\n/g, '<br>');
    }
}

function showInputMethod(method) {
    document.querySelectorAll('.input-method').forEach(el => el.style.display = 'none');
    document.getElementById(`${method}-input`).style.display = 'block';
}

function handleFileUpload(event) {}
function fetchFromURL() {}
function handleImageUpload(event) {}
function extractTextFromImage() {}

async function connectLINE() {
    const token = document.getElementById('line-token').value;
    const groupId = document.getElementById('line-group-id').value;
    
    if (!token || !groupId) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Token ‡πÅ‡∏•‡∏∞ Group ID');
        return;
    }

    const statusDiv = document.getElementById('line-status');
    statusDiv.innerHTML = 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...';

    try {
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        lineConnected = true;
        statusDiv.innerHTML = '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!';
        
        localStorage.setItem('line_token', token);
        localStorage.setItem('line_group_id', groupId);
        
        updateAutoStatus();
    } catch (error) {
        statusDiv.innerHTML = '‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß';
    }
}

async function testLINE() {
    if (!lineConnected) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE ‡∏Å‡πà‡∏≠‡∏ô');
        return;
    }

    const statusDiv = document.getElementById('line-status');
    statusDiv.innerHTML = 'üß™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö...';

    setTimeout(() => {
        statusDiv.innerHTML = '‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° LINE';
    }, 2000);
}

function startAutoSync() {
    if (autoSyncInterval) {
        clearInterval(autoSyncInterval);
    }

    const frequency = parseInt(document.getElementById('sync-frequency').value) * 60 * 1000;
    
    autoSyncInterval = setInterval(async () => {
        await syncDataFromLINE();
    }, frequency);

    updateAutoStatus();
    alert(`‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å ${document.getElementById('sync-frequency').value} ‡∏ô‡∏≤‡∏ó‡∏µ`);
}

function stopAutoSync() {
    if (autoSyncInterval) {
        clearInterval(autoSyncInterval);
        autoSyncInterval = null;
    }
    updateAutoStatus();
    alert('‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß');
}

async function syncDataFromLINE() {
    if (!lineConnected) return;

    const keywords = document.getElementById('keywords').value.split(',').map(k => k.trim());
    
    const mockData = [
        {
            type: 'assignment',
            title: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
            dueDate: '2025-08-10',
            source: '‡∏Å‡∏•‡∏∏‡πà‡∏° LINE ‡∏ß‡∏¥‡∏ä‡∏≤‡∏Ñ‡∏ì‡∏¥‡∏ï',
            priority: 'urgent'
        },
        {
            type: 'exam',
            title: '‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏Ñ ‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå',
            dueDate: '2025-08-15',
            source: '‡∏Å‡∏•‡∏∏‡πà‡∏° LINE ‡∏ß‡∏¥‡∏ä‡∏≤‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå',
            priority: 'normal'
        }
    ];

    mockData.forEach(item => {
        const existingTask = tasks.find(task => task.title === item.title);
        if (!existingTask) {
            tasks.push({
                id: Date.now() + Math.random(),
                title: item.title,
                date: item.dueDate,
                priority: item.priority,
                source: item.source,
                autoAdded: true
            });
        }
    });

    displayTasks();
    updateLatestData(mockData);
    updateAutoStatus();

    mockData.forEach(item => {
        sendNotification(`üìù ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà: ${item.title}`, `‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${item.dueDate}`);
    });
}

function updateLatestData(data) {
    const latestDataDiv = document.getElementById('latest-data');
    latestDataDiv.innerHTML = data.map(item => 
        `<div style="padding: 5px; border-bottom: 1px solid #eee;">
            <strong>${item.title}</strong><br>
            <small>üìÖ ${item.dueDate} | üì± ${item.source}</small>
        </div>`
    ).join('');
}

function updateAutoStatus() {
    const statusDiv = document.getElementById('auto-status');
    statusDiv.innerHTML = `
        <p>${autoSyncInterval ? 'üü¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: ‡πÄ‡∏õ‡∏¥‡∏î' : 'üî¥ ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: ‡∏õ‡∏¥‡∏î'}</p>
        <p>üì± LINE: ${lineConnected ? '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}</p>
        <p>üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${new Date().toLocaleTimeString('th-TH')}</p>
        <p>üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö: ${tasks.filter(t => t.autoAdded).length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
    `;
}

function requestNotificationPermission() {
    if ('Notification' in window) {
        Notification.requestPermission().then(permission => {
            if (permission === 'granted') {
                alert('‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß!');
                sendNotification('üéâ AI Buddy', '‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!');
            } else {
                alert('‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
            }
        });
    } else {
        alert('‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
    }
}

function sendNotification(title, body, icon = 'ü§ñ') {
    if (document.getElementById('browser-notify').checked && Notification.permission === 'granted') {
        new Notification(title, {
            body: body,
            icon: 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y=".9em" font-size="90">' + icon + '</text></svg>'
        });
    }

    if (document.getElementById('line-notify').checked && lineConnected) {
        sendLINENotification(`${title}\n${body}`);
    }

    if (document.getElementById('email-notify').checked) {
        sendEmailNotification(title, body);
    }

    notificationHistory.unshift({
        title: title,
        body: body,
        time: new Date().toLocaleString('th-TH'),
        type: 'auto'
    });

    updateNotificationHistory();
}

async function sendLINENotification(message) {
    const token = localStorage.getItem('line_token');
    const groupId = localStorage.getItem('line_group_id');
    
    if (!token || !groupId) return;

    try {
        console.log('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE:', message);
    } catch (error) {
        console.error('LINE notification error:', error);
    }
}

async function sendEmailNotification(title, body) {
    const email = document.getElementById('notify-email').value;
    if (!email) return;

    console.log(`üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà: ${email}`);
    console.log(`‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${title}`);
    console.log(`‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ${body}`);
}

function updateNotificationHistory() {
    const historyDiv = document.getElementById('notification-history');
    historyDiv.innerHTML = notificationHistory.slice(0, 10).map(notif => 
        `<div style="padding: 10px; border-bottom: 1px solid #eee; margin-bottom: 5px;">
            <strong>${notif.title}</strong><br>
            <small>${notif.body}</small><br>
            <small style="color: #666;">‚è∞ ${notif.time}</small>
        </div>`
    ).join('');
}

function saveNotificationSettings() {
    const settings = {
        browser: document.getElementById('browser-notify').checked,
        line: document.getElementById('line-notify').checked,
        email: document.getElementById('email-notify').checked,
        notifyEmail: document.getElementById('notify-email').value,
        notifyTime: document.getElementById('notify-time').value,
        advanceNotify: document.getElementById('advance-notify').value
    };

    localStorage.setItem('notification_settings', JSON.stringify(settings));
    alert('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!');
}

function testBrowserNotification() {
    sendNotification('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI Buddy');
}

function testLINENotification() {
    if (!lineConnected) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE ‡∏Å‡πà‡∏≠‡∏ô');
        return;
    }
    sendLINENotification('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡∏à‡∏≤‡∏Å AI Buddy');
    alert('üì± ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡πÅ‡∏•‡πâ‡∏ß');
}

function testEmailNotification() {
    const email = document.getElementById('notify-email').value;
    if (!email) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
        return;
    }
    sendEmailNotification('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å AI Buddy');
    alert('üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢)');
}

function connectGoogleCalendar() {
    alert('üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤ - ‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Calendar API');
}

function connectOutlook() {
    alert('üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤ - ‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Microsoft Graph API');
}

function exportToICS() {
    let icsContent = 'BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:AI Buddy\n';
    
    tasks.forEach(task => {
        const date = new Date(task.date);
        const dateStr = date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
        
        icsContent += `BEGIN:VEVENT
UID:${task.id}@aibuddy.com
DTSTAMP:${dateStr}
DTSTART:${dateStr}
SUMMARY:${task.title}
DESCRIPTION:‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å AI Buddy
END:VEVENT
`;
    });
    
    icsContent += 'END:VCALENDAR';
    
    const blob = new Blob([icsContent], { type: 'text/calendar' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'AI_Buddy_Schedule.ics';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    alert('üìÑ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏ô‡∏≥‡πÑ‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ');
}

function checkUpcomingTasks() {
    const today = new Date();
    const settings = JSON.parse(localStorage.getItem('notification_settings') || '{"advanceNotify": 1}');
    const advanceDays = parseInt(settings.advanceNotify);

    tasks.forEach(task => {
        const taskDate = new Date(task.date);
        const daysUntil = Math.ceil((taskDate - today) / (1000 * 60 * 60 * 24));
        
        if (daysUntil === advanceDays) {
            sendNotification(
                `‚è∞ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤: ${task.title}`,
                `‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å ${daysUntil} ‡∏ß‡∏±‡∏ô (${task.date})`
            );
        } else if (daysUntil === 0) {
            sendNotification(
                `üö® ‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${task.title}`,
                `‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ! ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô`
            );
        }
    });
}

function generateMockSummary(text) {
    const sentences = text.split('.').filter(s => s.trim().length > 10);
    if (sentences.length <= 3) {
        return `<p><strong>‡∏™‡∏£‡∏∏‡∏õ:</strong> ${text.substring(0, 200)}...</p>`;
    }
    
    const importantSentences = sentences.slice(0, Math.min(3, sentences.length));
    return `
        <div>
            <p><strong>‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:</strong></p>
            <ul>
                ${importantSentences.map(s => `<li>${s.trim()}.</li>`).join('')}
            </ul>
            <p><strong>‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°:</strong> ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ô‡∏µ‡πâ‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß</p>
        </div>
    `;
}

async function generateProjectIdeas() {
    const subject = document.getElementById('subject-name').value;
    if (!subject.trim()) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤');
        return;
    }

    document.getElementById('project-results').style.display = 'block';
    document.getElementById('project-content').innerHTML = 'ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå...';

    const messages = [
        {
            role: 'system',
            content: `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢
            
‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:
**üí° ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**
            
**1. [‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠]**
- ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: [‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô‡πÜ]
- ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£: [‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô]
            
**2. [‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠]**
- ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: [‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô‡πÜ]
- ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£: [‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô]
            
[‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å 3 ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠]
            
**üìö ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:**
[‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå]`
        },
        {
            role: 'user',
            content: `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤ "${subject}" ‡πÉ‡∏´‡πâ 5 ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠`
        }
    ];

    const ideas = await callOpenAI(messages, 1000);
    
    if (ideas) {
        document.getElementById('project-content').innerHTML = ideas.replace(/\n/g, '<br>');
    } else {
        document.getElementById('project-content').innerHTML = generateMockProjectIdeas(subject);
    }
}

function generateMockProjectIdeas(subject) {
    const projectTemplates = {
        '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå': [
            '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏≠‡∏™‡∏°‡∏∏‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå',
            '‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
            '‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏≠‡∏µ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏¥‡∏£‡πå‡∏ã‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å',
            '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°',
            '‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°'
        ],
        '‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î': [
            '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô',
            '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå',
            '‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå Social Media Marketing',
            '‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÉ‡∏´‡∏°‡πà',
            '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à Startup'
        ],
        '‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤': [
            '‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ï‡πà‡∏≠‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô',
            '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ',
            '‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏™‡∏µ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö',
            '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
            '‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥'
        ]
    };

    let ideas = projectTemplates[subject] || [
        '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à',
        '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏£‡∏ì‡∏µ‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á',
        '‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤',
        '‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢',
        '‡∏Å‡∏≤‡∏£‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏ß‡∏£‡∏£‡∏ì‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞'
    ];

    return ideas.map((idea, index) => 
        `<div class="project-suggestion">
            <strong>${index + 1}. ${idea}</strong>
            <p>‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤ "${subject}" ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÑ‡∏î‡πâ</p>
        </div>`
    ).join('');
}

function addTask() {
    const title = document.getElementById('task-title').value;
    const date = document.getElementById('task-date').value;
    const priority = document.getElementById('task-priority').value;

    if (!title || !date) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
        return;
    }

    const task = {
        id: Date.now(),
        title: title,
        date: date,
        priority: priority
    };

    tasks.push(task);
    displayTasks();
    
    document.getElementById('task-title').value = '';
    document.getElementById('task-date').value = '';
    document.getElementById('task-priority').value = 'normal';
}

function displayTasks() {
    const taskList = document.getElementById('task-list');
    if (tasks.length === 0) {
        taskList.innerHTML = '<p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥</p>';
        return;
    }

    tasks.sort((a, b) => new Date(a.date) - new Date(b.date));

    taskList.innerHTML = tasks.map(task => {
        const daysLeft = Math.ceil((new Date(task.date) - new Date()) / (1000 * 60 * 60 * 24));
        const urgentClass = task.priority === 'urgent' || daysLeft <= 3 ? 'task-urgent' : 'task-normal';
        
        return `
            <div class="task-item ${urgentClass} ${task.autoAdded ? 'auto-added' : ''}">
                <div>
                    <strong>${task.title}</strong><br>
                    <small>‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${task.date} (‡∏≠‡∏µ‡∏Å ${daysLeft} ‡∏ß‡∏±‡∏ô)</small>
                </div>
                <button class="delete-btn" onclick="deleteTask(${task.id})">‡∏•‡∏ö</button>
            </div>
        `;
    }).join('');
}

function deleteTask(id) {
    tasks = tasks.filter(task => task.id !== id);
    displayTasks();
}

async function sendMessage() {
    const question = document.getElementById('user-question').value;
    if (!question.trim()) return;

    addChatMessage(question, 'user');
    
    addChatMessage('ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î...', 'ai');
    
    const messages = [
        {
            role: 'system',
            content: `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ï‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡∏≠‡∏î‡∏ó‡∏ô ‡πÅ‡∏•‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ 
            
‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á
- ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÑ‡∏õ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
- ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
- ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≤‡∏Å ‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
- ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡∏¥‡∏î‡πÄ‡∏≠‡∏á`
        },
        ...chatHistory.slice(-6),
        {
            role: 'user',
            content: question
        }
    ];

    const answer = await callOpenAI(messages, 800);
    
    const chatContainer = document.getElementById('chat-container');
    chatContainer.removeChild(chatContainer.lastChild);
    
    if (answer) {
        addChatMessage(answer, 'ai');
        chatHistory.push({role: 'user', content: question});
        chatHistory.push({role: 'assistant', content: answer});
    } else {
        const fallbackAnswer = generateMockAnswer(question);
        addChatMessage(fallbackAnswer, 'ai');
    }

    document.getElementById('user-question').value = '';
}

function addChatMessage(message, sender) {
    const chatContainer = document.getElementById('chat-container');
    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message ${sender === 'user' ? 'user-message' : 'ai-message'}`;
    
    if (sender === 'user') {
        messageDiv.innerHTML = `<strong>‡∏Ñ‡∏∏‡∏ì:</strong> ${message}`;
    } else {
        messageDiv.innerHTML = `<strong>AI ‡∏ï‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå:</strong> ${message}`;
    }
    
    chatContainer.appendChild(messageDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

function generateMockAnswer(question) {
    const answers = [
        "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏≤‡∏° ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤...",
        "‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å ‡∏ú‡∏°‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡πà‡∏≤...",
        "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö...",
        "‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠...",
        "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ú‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡∏ö‡πà‡∏≠‡∏¢ ‡∏ú‡∏°‡∏Ç‡∏≠‡∏ä‡∏µ‡πâ‡πÅ‡∏à‡∏á‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö..."
    ];
    
    return answers[Math.floor(Math.random() * answers.length)];
}

function handleEnter(event) {
    if (event.key === 'Enter') {
        sendMessage();
    }
}

function addCourse() {
    const name = document.getElementById('course-name').value;
    const day = document.getElementById('course-day').value;
    const time = document.getElementById('course-time').value;

    if (!name || !time) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
        return;
    }

    const course = {
        id: Date.now(),
        name: name,
        day: day,
        time: time
    };

    courses.push(course);
    displaySchedule();
    
    document.getElementById('course-name').value = '';
    document.getElementById('course-time').value = '';
}

function displaySchedule() {
    const scheduleDisplay = document.getElementById('schedule-display');
    
    if (courses.length === 0) {
        scheduleDisplay.innerHTML = '<p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</p>';
        return;
    }

    const days = ['‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£', '‡∏û‡∏∏‡∏ò', '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ', '‡∏®‡∏∏‡∏Å‡∏£‡πå'];
    const schedule = {};
    
    days.forEach(day => {
        schedule[day] = courses.filter(course => course.day === day);
    });

    let html = '<table class="schedule-table"><tr><th>‡∏ß‡∏±‡∏ô</th><th>‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤</th><th>‡πÄ‡∏ß‡∏•‡∏≤</th></tr>';
    
    days.forEach(day => {
        if (schedule[day].length > 0) {
            schedule[day].forEach((course, index) => {
                html += `<tr>
                    ${index === 0 ? `<td rowspan="${schedule[day].length}">${day}</td>` : ''}
                    <td>${course.name}</td>
                    <td>${course.time}</td>
                </tr>`;
            });
        } else {
            html += `<tr><td>${day}</td><td colspan="2">‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</td></tr>`;
        }
    });
    
    html += '</table>';
    scheduleDisplay.innerHTML = html;
}

window.onload = function() {
    displayTasks();
    displaySchedule();
    initializeAPI();
    addAPISettingsButton();
    loadSettings();
    
    setInterval(checkUpcomingTasks, 60 * 60 * 1000);
    
    setTimeout(checkUpcomingTasks, 5000);
    
    showWelcomeMessage();
};

function loadSettings() {
    const notificationSettings = JSON.parse(localStorage.getItem('notification_settings') || '{}');
    if (notificationSettings.browser !== undefined) {
        document.getElementById('browser-notify').checked = notificationSettings.browser;
    }
    if (notificationSettings.line !== undefined) {
        document.getElementById('line-notify').checked = notificationSettings.line;
    }
    if (notificationSettings.email !== undefined) {
        document.getElementById('email-notify').checked = notificationSettings.email;
    }
    if (notificationSettings.notifyEmail) {
        document.getElementById('notify-email').value = notificationSettings.notifyEmail;
    }
    if (notificationSettings.notifyTime) {
        document.getElementById('notify-time').value = notificationSettings.notifyTime;
    }
    if (notificationSettings.advanceNotify) {
        document.getElementById('advance-notify').value = notificationSettings.advanceNotify;
    }

    const lineToken = localStorage.getItem('line_token');
    const lineGroupId = localStorage.getItem('line_group_id');
    if (lineToken && lineGroupId) {
        document.getElementById('line-token').value = lineToken;
        document.getElementById('line-group-id').value = lineGroupId;
        lineConnected = true;
        document.getElementById('line-status').innerHTML = '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô';
    }
}

function showWelcomeMessage() {
    const isFirstTime = !localStorage.getItem('ai_buddy_visited');
    
    if (isFirstTime) {
        setTimeout(() => {
            const welcome = `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà AI Buddy!
            
üìñ ‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ - ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏ï‡∏£‡∏á‡∏à‡∏∏‡∏î
üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå - ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ï‡∏≤‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô  
‚è∞ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô/‡∏™‡∏≠‡∏ö - ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ LINE
üí¨ AI ‡∏ï‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß - ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ 24 ‡∏ä‡∏°.
ü§ñ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ - ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏•‡∏ô‡πå
            
‚ú® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö Mock ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!`;
            
            alert(welcome);
            localStorage.setItem('ai_buddy_visited', 'true');
        }, 1000);
    }
}

function addAPISettingsButton() {
    const header = document.querySelector('.header');
    const settingsContainer = document.createElement('div');
    settingsContainer.style.marginTop = '15px';
    
    const settingsBtn = document.createElement('button');
    settingsBtn.innerHTML = '‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key';
    settingsBtn.className = 'btn';
    settingsBtn.onclick = function() {
        const currentKey = OPENAI_API_KEY ? `${OPENAI_API_KEY.substring(0, 8)}...` : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤';
        const confirmed = confirm(`üîë API Key ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${currentKey}\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô API Key ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`);
        if (confirmed) {
            promptForAPIKey();
        }
    };
    
    const testBtn = document.createElement('button');
    testBtn.innerHTML = 'üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API';
    testBtn.className = 'btn';
    testBtn.onclick = async function() {
        if (!OPENAI_API_KEY) {
            alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡∏Å‡πà‡∏≠‡∏ô');
            return;
        }
        
        testBtn.innerHTML = 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...';
        testBtn.disabled = true;
        
        const testMessages = [{
            role: 'user',
            content: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏ß‡πà‡∏≤ "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥" '
        }];
        
        const result = await callOpenAI(testMessages, 50);
        
        if (result) {
            alert(`‚úÖ API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!\n\n‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö: ${result}`);
        } else {
            alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ\n‡πÅ‡∏≠‡∏õ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Mock ‡πÅ‡∏ó‡∏ô');
        }
        
        testBtn.innerHTML = 'üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API';
        testBtn.disabled = false;
    };
    
    const statusDiv = document.createElement('div');
    statusDiv.style.marginTop = '10px';
    statusDiv.style.fontSize = '14px';
    statusDiv.style.color = 'white';
    statusDiv.innerHTML = OPENAI_API_KEY ? 
        'üü¢ API Key: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß' : 
        'üü° API Key: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Mock)';
    
    settingsContainer.appendChild(settingsBtn);
    settingsContainer.appendChild(testBtn);
    settingsContainer.appendChild(statusDiv);
    header.appendChild(settingsContainer);
}